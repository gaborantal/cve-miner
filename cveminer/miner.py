import datetime
import json
import iso8601
import pytz

from . import models

def mine_repo(args):
    extractor = models.GitExtractor()
    git_logs = dict()
    if(args.online):
        try:
            git_logs = extractor.get_online_logs(args.online)
        except FileNotFoundError as ex:
            print(ex)
            git_logs = dict()
    elif(args.local):
        try:
            git_logs = extractor.get_local_logs(args.local)
        except FileNotFoundError as ex:
            print(ex)
            git_logs = dict()

    return git_logs


def manage_cves(args):
    manager = models.CveManager()
    if args.download:
        manager.setup_cves()

    if args.database:
        manager.setup_database()

def get_stats(args):
    stats = dict()
    # get_stats is mines are classifies commits using the classes provided
    classifier =  models.CommitClassifier()
    cve_commits = classifier.get_cve_commits(mine_repo(args))
    # stats are calculated for every cve commit
    for cve in cve_commits:
        stats[cve] = models.CveStatistics()
        stats[cve].active_contributors = cve_commits[cve].contributors
        stats[cve].active_contributor_count = len(cve_commits[cve].contributors)
        stats[cve].commit_count = cve_commits[cve].between
        stats[cve].time_elapsed = dateParser(cve_commits[cve].fixCommit['commit_date']) - dateParser(cve_commits[cve].foundCommit['commit_date'])
        stats[cve].severity = cve_commits[cve].severity
        stats[cve].base_score = cve_commits[cve].base_score

    if len(stats) != 0:
        global_stats = models.GlobalStatistics(stats)
        stats['correlation_coefficient'] = global_stats.calculate_correlation()
        print('creating stats.json')
        with open('stats.json', 'w', encoding='utf-8') as f:
            json.dump(stats, f, indent=4, cls=models.StatEncoder)
    else:
        print('No cve-s have been found. No stats.json will be created.')

# since gitlogparser is a separate tool, the reparsing of dates is needed
def dateParser(date_string):
    format_string = '%Y-%m-%j %H:%M:%S%z'
    date_copy = date_string
    try:
        #print(date_string.split('+')[0])
        # loses offset, since 3.6 can't handle it, but it is not relevant information anyways
        time = iso8601.parse_date(date_string)
        #time = datetime.datetime.strptime(date_string, format_string)
        #print(date_string.split('+')[0])
        #correct_time = time.replace(month = int(date_copy.split('-')[1]))
        return time
    except Exception as ex:
        print(ex)
        return None
