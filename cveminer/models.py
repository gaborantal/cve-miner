import subprocess
import os
import json

import gitlogparser.parser as gitParser

class GitExtractor(object):
    def __init__(self):
        self.logs = list()
        # this is where the repositories will be cloned
        self.repo_path = './repos'

    def get_online_logs(self, target_url):
        self.download_repo(target_url)
        # prep the directory, since download repo already enters the repo path, it doesn't need to be added
        directory = './' + target_url.split('/')[-1]
        if os.path.isdir(directory):
            return self.get_local_logs(directory)
        else:
            raise FileNotFoundError('The specified directory couldn\'t be downloaded.')

    def get_local_logs(self, target_path):
        # create a dummy class to simulate console argument
        class DummyArgs(object):
            def __init__(self, dir):
                self.directory = dir
        if os.path.isdir(target_path):
            try:
            # parse the git logs
                gitParser.get_log(DummyArgs(target_path))
            # read the git logs
                if os.path.isfile('logdata_new.json'):
                    with open('logdata_new.json', 'r', encoding='utf-8') as f:
                        self.logs = json.load(f)
            # remove the temporary json file
                    print('Removing json')
                    subprocess.run(['rm', 'logdata_new.json'])
                return self.logs
            except Exception as ex:
                print(ex)
                
        else:
            raise FileNotFoundError('The specified directory doesn\'t exist!')

    def download_repo(self, target_url):
        # try to open the repo path, if it fails, create a new directory
        try:
            os.chdir(self.repo_path)
        except FileNotFoundError:
            os.mkdir(self.repo_path)
            os.chdir(self.repo_path)

        try:
        # clone the requested url
            subprocess.run(['git', 'clone', target_url])
        except Exception as ex:
            print(ex)