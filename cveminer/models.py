import subprocess
import os
import json
import copy
import re
import time
import numpy

import gitlogparser.parser as gitParser
import cvemanager.cve_manager as cveManager
import cvemanager.cve_dbms as database

from gitlogparser.models import CommitData
from gitlogparser.models import Author

class GitExtractor(object):
    def __init__(self):
        self.logs = list()
        # this is where the repositories will be cloned
        self.repo_path = './repos'
        self.baseDir = os.getcwd()

    def get_online_logs(self, target_url):
        self.download_repo(target_url)
        # prep the directory, since download repo already enters the repo path, it doesn't need to be added
        directory = './' + target_url.split('/')[-1]
        if os.path.isdir(directory):
            return self.get_local_logs(directory)
        else:
            os.chdir(self.baseDir)
            raise FileNotFoundError('The specified directory couldn\'t be downloaded.')

    def get_local_logs(self, target_path):
        # create a dummy class to simulate console argument
        class DummyArgs(object):
            def __init__(self, dir):
                self.directory = dir
        if os.path.isdir(target_path):
            try:
            # parse the git logs
                print('Starting git log parser.')
                gitParser.get_log(DummyArgs(target_path))
            # read the git logs
                if os.path.isfile('logdata_new.json'):
                    with open('logdata_new.json', 'r', encoding='utf-8') as f:
                        self.logs = json.load(f)
            # remove the temporary json file
                    print('Removing temporary json')
                    os.remove('logdata_new.json')
                os.chdir(self.baseDir)
                return self.logs
            except Exception as ex:
                os.chdir(self.baseDir)
                print(ex)

        else:
            raise FileNotFoundError('The specified directory doesn\'t exist!')

    def download_repo(self, target_url):
        # try to open the repo path, if it fails, create a new directory
        try:
            os.chdir(self.repo_path)
        except FileNotFoundError:
            os.mkdir(self.repo_path)
            os.chdir(self.repo_path)

        # clone the requested url
        subprocess.run(['git', 'clone', target_url])


class CveManager(object):
    def __init__(self):
        self.cve_dir = None
        self.csv_dir = None
        self.user = None
        self.host = None
        self.name = None
        self.owner = None
        self.password = None

    def read_settings(self):
        with open('settings.json', 'r') as f:
            settings = json.load(f)
            self.cve_dir = settings["paths"]["cve_path"]
            self.csv_dir = settings["paths"]["csv_path"]
            self.user = settings['database']['user']
            self.host = settings['database']['host']
            self.name = settings['database']['name']
            self.owner = settings['database']['owner']
            self.password = input('Enter password for %s: ' % settings['database']['user'])

    def setup_cves(self):
        self.read_settings()
        cveManager.download_cves(self.cve_dir, False)
        cveManager.process_cves(self.cve_dir, self.csv_dir, True)

    def setup_database(self):
        self.read_settings()
        database.create_database(self.user, self.password, self.host, self.name, self.owner)
        database.create_tables(self.user, self.password, self.host, self.name)
        database.import_database(self.csv_dir, self.user, self.password, self.host, self.name)

    def get_cve(self, cve_id):
        if self.password is None:
            self.read_settings()
        selected_cve = database.execute_query(self.user, self.password, self.host, self.name, cve_id, date=0)
        if not selected_cve:
            return None
        return selected_cve

# class to store data about found cve
class CveData(object):
    def __init__(self, foundCommit = None, fixCommit = None, between = 0, contributors = list(), severity = None, base_score=None):
        self.foundCommit = foundCommit
        self.fixCommit = fixCommit
        self.between = between
        self.contributors = contributors
        self.severity = severity
        self.base_score = base_score

    def __str__(self):
        return f'start commit: {self.foundCommit}, fixing commit: {self.fixCommit}, between them {self.between} commit(s) have been made by {len(self.contributors)} contributors'

#class to calssify commits as cve
class CommitClassifier(object):
    def __init__(self):
        self.cve_id_pattern = re.compile(r'(cve)\-([0-9]{4})\-([0-9]{4})', re.IGNORECASE)
    # function that gets every commit that looks like a cve and returns it
    def get_cve_commits(self, commits):
        cve_commits = dict()
        cve_manager = CveManager()
        commits.reverse()
        # look through mined commits and collect every cve
        for commit in commits:
            if commit['message'] and self.cve_id_pattern.search(commit['message']):
                cve = self.cve_id_pattern.search(commit['message']).group(0).upper()
                # get data stored about the cve in the db
                cve_db_data = cve_manager.get_cve(cve)
                # if a cve only appears once it is assumed to be a fix
                # if a cve is not in the database it is considered to be invalid and therefore not considered
                if cve not in cve_commits.keys() and cve_db_data:
                    cve_commits[cve] = CveData(commit, commit)
                    cve_commits[cve].severity = cve_db_data[0][6].rstrip()
                    cve_commits[cve].base_score = cve_db_data[0][5]
                else:
                    cve_commits[cve].fixCommit = commit
                    if commit['author'] not in cve_commits[cve].contributors:
                        cve_commits[cve].contributors.append(commit['author'])
        
        for cve in cve_commits:
            started = False
            if cve_commits[cve].foundCommit == cve_commits[cve].fixCommit:
                continue
            else:
                for commit in commits:
                    if started:
                        cve_commits[cve].between = cve_commits[cve].between + 1
                        if cve_commits[cve].fixCommit == commit:
                            break
                    elif cve_commits[cve].foundCommit == commit:
                        started = True

        return cve_commits

# class to store statisctics the have been calculated from CveData objects
class CveStatistics(object):
    def __init__(self, active_contributors = list(), active_contributor_count = 0, commit_count = 0, time_elapsed = None, severity=None, base_score=None):
        self.active_contributors = active_contributors
        self.active_contributor_count = active_contributor_count
        self.commit_count = commit_count
        self.time_elapsed = time_elapsed
        self.severity = severity
        self.base_score = base_score
            
    def __str__(self):
        return f'{self.active_contributors}, {self.active_contributor_count}, {self.commit_count}, {self.time_elapsed}, {self.severity}, {self.base_score}'
    
    def to_json(self):
        return{
            'active_contributors' : self.active_contributors,
            'active_contributor_count' : self.active_contributor_count,
            'commit_count' : self.commit_count,
            'time_elapsed' : str(self.time_elapsed),
            'severity': self.severity,
            'base_score': self.base_score
        }

class GlobalStatistics(object):
    def __init__(self, stats=None):
        self.stats = stats

    def calculate_correlation(self):
        base_scores = list()
        fix_times = list()
        if not self.stats:
            return None

        for cve in self.stats.keys():
            base_scores.append(self.stats[cve].base_score)
            fix_times.append(self.stats[cve].time_elapsed.total_seconds())

        corr = numpy.corrcoef(base_scores, fix_times)
        return corr[0, 1]


class StatEncoder(json.JSONEncoder):
    def default(self, stats):
        # creates a list out of the mined commits
        if isinstance(stats, CveStatistics):
            return stats.to_json()
        return super(StatEncoder, self).default(stats)