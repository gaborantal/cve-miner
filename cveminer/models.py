import subprocess
import os
import json

import gitlogparser.parser as gitParser
import cvemanager.cve_manager as cveManager
import cvemanager.cve_dbms as database

class GitExtractor(object):
    def __init__(self):
        self.logs = list()
        # this is where the repositories will be cloned
        self.repo_path = './repos'
        self.baseDir = os.getcwd()

    def get_online_logs(self, target_url):
        self.download_repo(target_url)
        # prep the directory, since download repo already enters the repo path, it doesn't need to be added
        directory = './' + target_url.split('/')[-1]
        if os.path.isdir(directory):
            return self.get_local_logs(directory)
        else:
            os.chdir(self.baseDir)
            raise FileNotFoundError('The specified directory couldn\'t be downloaded.')

    def get_local_logs(self, target_path):
        # create a dummy class to simulate console argument
        class DummyArgs(object):
            def __init__(self, dir):
                self.directory = dir
        if os.path.isdir(target_path):
            try:
            # parse the git logs
                gitParser.get_log(DummyArgs(target_path))
            # read the git logs
                if os.path.isfile('logdata_new.json'):
                    with open('logdata_new.json', 'r', encoding='utf-8') as f:
                        self.logs = json.load(f)
            # remove the temporary json file
                    print('Removing json')
                    os.remove('logdata_new.json')
                os.chdir(self.baseDir)
                return self.logs
            except Exception as ex:
                os.chdir(self.baseDir)
                print(ex)

        else:
            raise FileNotFoundError('The specified directory doesn\'t exist!')

    def download_repo(self, target_url):
        # try to open the repo path, if it fails, create a new directory
        try:
            os.chdir(self.repo_path)
        except FileNotFoundError:
            os.mkdir(self.repo_path)
            os.chdir(self.repo_path)

        # clone the requested url
        subprocess.run(['git', 'clone', target_url])

class CveManager(object):
    def __init__(self):
        self.base_dir = os.getcwd()

    def setup_cve(self, input_dir, result_dir):

        if input_dir:
            in_dir = input_dir
        else:
            in_dir = self.base_dir + '/nvd/'

        cveManager.download_cves(in_dir, False)

        if result_dir:
            res_dir = result_dir
        else:
            res_dir = self.base_dir + '/results/'

        cveManager.process_cves(in_dir, res_dir, True)

    def setup_database(self, directory, user, owner, password, host, name):

        if not directory:
            directory = self.base_dir + '/results/'

        database.create_database(user, password, host, name, owner)
        database.create_tables(user, password, host, name)
        database.import_database(directory, user, password, host, name)

