import argparse
import distutils
from . import miner


def main():
    arg_parser = argparse.ArgumentParser(description='Mine a repository for CVEs and create a report based on the findings')
    group = arg_parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-o', '--online', metavar='', help='Download and mine a repository from an online git repo')
    group.add_argument('-l', '--local', metavar='', help='Mine a local git repo')
    group.add_argument('-d', '--download', action='store_true', help='Download CVEs and insert them into csv files')
    group.add_argument('-db', '--database', action='store_true', help='Create database and store CVEs')
    group.add_argument('-j', '--json', metavar='', help='Mine every repo from a GHtorrent json data dump')
    arg_parser.add_argument('-st', '--store_db', metavar='', default=False, help='A value to decide wether to save the mined data in the db or not')
    arg_parser.add_argument('-p', '--password', action='store', dest='password', default=None, help='The password for the Postgres database')
    arg_parser.add_argument('-ak', '--apikey', action='store', dest='apikey', default=None, help='The api key for Airtable')
    args = arg_parser.parse_args()
    if args.download or args.database:
        miner.manage_cves(args)
    elif args.online or args.local:
        try:
            if args.store_db:
                args.store_db = distutils.util.strtobool(args.store_db)
            miner.get_stats(args)
            
        except Exception as ex:
            print(ex)
            print('Pleasue use y, yes, t, true, on or 1 for True, or n, no, f, false, off, 0 for False.')
        
    elif args.json:
        miner.parse_ghtorrent_json(args)


if __name__ == '__main__':
    main()
