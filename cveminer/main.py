import argparse
import distutils
import os
from . import miner


def main():
    arg_parser = argparse.ArgumentParser(description='Mine a repository for CVEs and create a report based on the findings')
    group = arg_parser.add_mutually_exclusive_group(required=True)
    
    #setup/action arguments, these are needed to either set up or run the miner
    group.add_argument('-o', '--online', metavar='', help='Download and mine a repository from an online git repo')
    group.add_argument('-l', '--local', metavar='', help='Mine a local git repo')
    group.add_argument('-d', '--download', action='store_true', help='Download CVEs and insert them into csv files')
    group.add_argument('-db', '--database', action='store_true', help='Create database and store CVEs')
    group.add_argument('-j', '--json', metavar='', help='Mine the repos given in JSON GHTorrent dumps in the directory specified here, the language used in the repos is either the json file\'s name or the one specified in the file')
    group.add_argument('-u', '--update', action='store_true', help='Update the global statistics in the db')

    # optional arguments these only take effect if the miner is running
    arg_parser.add_argument('-lang', '--language', default='unknown', help='Set the language of the mined repo.')
    arg_parser.add_argument('-st', '--store_db', action='store_true', default=False, help='A value to decide wether to save the mined data in the db or not')
    arg_parser.add_argument('-p', '--password', action='store', dest='password', default=None, help='The password for the Postgres database')
    arg_parser.add_argument('-ak', '--apikey', action='store', dest='apikey', default=None, help='The api key for Airtable')
    
    args = arg_parser.parse_args()

    try:
        os.environ['GITHUBTOKEN']
        os.environ['ROOTDIR'] = os.getcwd()
        if args.download or args.database or args.update:
            miner.manage_cves(args)
        elif args.online or args.local:
            miner.get_stats(args)
        elif args.json:
            miner.mine_json_from_dir(args)
    except KeyError:
        print('Please specify your github key, set a GITHUBTOKEN environtment variable')


if __name__ == '__main__':
    main()
